//binary search tree search for a element ,min ele,max ele
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

struct Node* insert(struct Node* root, int data) {
    if (root == NULL)
        return createNode(data);
    
    if (data < root->data)
        root->left = insert(root->left, data);
    else if (data > root->data)
        root->right = insert(root->right, data);
    
    return root;
}

struct Node* search(struct Node* root, int key) {
    if (root == NULL || root->data == key)
        return root;
    
    if (key < root->data)
        return search(root->left, key);
    else
        return search(root->right, key);
}

struct Node* findMin(struct Node* root) {
    if (root == NULL)
        return NULL;
    while (root->left != NULL)
        root = root->left;
    return root;
}

struct Node* findMax(struct Node* root) {
    if (root == NULL)
        return NULL;
    while (root->right != NULL)
        root = root->right;
    return root;
}

int main() {
	printf("name : B.sandeep\n");
    struct Node* root = NULL;
    root = insert(root, 50);
    root = insert(root, 30);
    root = insert(root, 20);
    root = insert(root, 40);
    root = insert(root, 70);
    root = insert(root, 60);
    root = insert(root, 80);

    int searchKey = 40;
    struct Node* foundNode = search(root, searchKey);
    if (foundNode != NULL)
        printf("Element %d found in the tree.\n", searchKey);
    else
        printf("Element %d not found in the tree.\n", searchKey);

    struct Node* minNode = findMin(root);
    if (minNode != NULL)
        printf("Minimum element: %d\n", minNode->data);
    else
        printf("Tree is empty.\n");

    struct Node* maxNode = findMax(root);
    if (maxNode != NULL)
        printf("Maximum element: %d\n", maxNode->data);
    else
        printf("Tree is empty.\n");

    return 0;
}
